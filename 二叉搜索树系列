538.这道题我是想复杂了，其实就是一个不断累加的过程，遍历加累加，值记住就对了
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def convertBST(self, root):
        """
        :type root: TreeNode
        :rtype: TreeNode
        """
        self.total = 0
        def ba_tree(node):
            if node:
                ba_tree(node.right)
                t = node.val
                node.val += self.total
                self.total += t
                ba_tree(node.left)

        ba_tree(root)
        return root
938.二叉搜索树范围的和。
教科书式二叉搜索树
给定二叉搜索树的根结点 root，返回 L 和 R（含）之间的所有结点的值的和。

二叉搜索树保证具有唯一的值。

示例 1：

输入：root = [10,5,15,3,7,null,18], L = 7, R = 15
输出：32
示例 2：

输入：root = [10,5,15,3,7,13,18,1,null,6], L = 6, R = 10
输出：23

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/range-sum-of-bst
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def rangeSumBST(self, root, L, R):
        """
        :type root: TreeNode
        :type L: int
        :type R: int
        :rtype: int
        """   
        #self.ans = 0
        def dfs_tree(node,l,r):
            if node:
                if l <= node.val and node.val <= r:
                    self.ans = self.ans + node.val
                if node.val > l:
                    dfs_tree(node.left,l,r)
                if node.val < r :
                    dfs_tree(node.right,l,r)
        self.ans = 0
        dfs_tree(root,L,R)
        return self.ans
    
非递归的方式
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def hasPathSum(self, root, sum):
        """
        :type root: TreeNode
        :type sum: int
        :rtype: bool
        """
        def tree_val(node,val):
            if node:
                val+=node.val
                if node.left!=None or node.right!=None:
                    return tree_val(node.left,val) or tree_val(node.right,val)
                else:
                    if val == sum:
                        return True
                    else:
                        return False
            else:
                return False
        return tree_val(root,0)
            
            
                    
