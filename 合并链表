https://leetcode-cn.com/problems/merge-two-sorted-lists/submissions/
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def mergeTwoLists(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        
        if l1!=None and l2 !=None:
            root = ListNode(-1)
            p = root
            p1 = l1
            p2 = l2
            while(p1!=None and p2!=None):
                if p1.val <= p2.val:
                    p.next = p1
                    p1 = p1.next
                else:
                    p.next = p2
                    p2 = p2.next
                p = p.next
            p.next = p1 if p1!=None else p2
            return root.next
        else:
            return l1 if l1 != None else l2
合并k个链表： https://leetcode-cn.com/problems/merge-k-sorted-lists/
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def mergeKLists(self, lists):
        """
        :type lists: List[ListNode]
        :rtype: ListNode
        """
        if lists == []:
            return None
        else:
            l = len(lists)
            it = 1
            while(it<l):
                for i in range(0,l,it*2):
                    if i+it < l:
                        lists[i] = self.mergeTwoLists(lists[i],lists[i+it])
                it = it*2
            return lists[0]
                
    def mergeTwoLists(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        
        if l1!=None and l2 !=None:
            root = ListNode(-1)
            p = root
            p1 = l1
            p2 = l2
            while(p1!=None and p2!=None):
                if p1.val <= p2.val:
                    p.next = p1
                    p1 = p1.next
                else:
                    p.next = p2
                    p2 = p2.next
                p = p.next
            p.next = p1 if p1!=None else p2
            return root.next
        else:
            return l1 if l1 != None else l2
                
                
            
            


